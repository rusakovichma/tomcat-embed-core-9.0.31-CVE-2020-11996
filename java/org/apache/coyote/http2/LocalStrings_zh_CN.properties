# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

abstractStream.windowSizeDec=连接[{0}]，流[{1}]，将流控制窗口减少[{2}]到[{3}]
abstractStream.windowSizeInc=连接 [{0}], 流 [{1}], 增加流量控制窗口[{2}] 到 [{3}]
abstractStream.windowSizeTooBig=连接[{0}]，流[{1}]，窗口大小从[{2}]增加到[{3}]，超过了允许的最大值

connectionPrefaceParser.mismatch=请求了新的远程流ID[{0}]，但所有远程流都必须使用奇数标识符。

connectionSettings.debug=连接[{0}]，参数类型[{1}]设置为[{2}]
connectionSettings.enablePushInvalid=连接[{0}]，请求的enable push[{1}]值不是允许的值之一（零或一）
connectionSettings.headerTableSizeLimit=连接 [{0}]，尝试将 header 表大小设置为 [{1}]，但限制为 16k
connectionSettings.maxFrameSizeInvalid=连接[{0}]，请求的最大帧大小[{1}]在[{2}]到[{3}]的允许范围之外
connectionSettings.unknown=连接[{0}]，标识为[{1}]和值为[{2}]的未知设置被忽略

frameType.checkPayloadSize=对帧类型[{1}]来说，负载[{0}]是无效的
frameType.checkStream=无效的帧类型[{0}]

hpack.integerEncodedOverTooManyOctets=HPACK 可变长度整数编码过多的八位字节，最大值为[{0}]
hpack.invalidCharacter=代码点[{1}]处的Unicode字符[{0}]无法编码，因为它超出了允许的0到255范围。

hpackdecoder.tableSizeUpdateNotAtStart=任何表大小的更新都必须在头块开始时发送。

http2Parser.error=Connection [{0}]，Stream [{1}], 框架类型 [{2}], 错误
http2Parser.headerLimitCount=连接[{0}]，流[{1}]，标题太多
http2Parser.headerLimitSize=连接[{0}]，Stream[{1}]，总的头信息尺寸太大
http2Parser.headers.wrongStream=连接[{0}], 头部信息对于流[{1}]正在进行但对于流[{2}]的一帧已经收到了。
http2Parser.invalidBuffers=应使用两个缓冲区进行读取
http2Parser.nonZeroPadding=连接[{0}]，流[{1}]，非零填充
http2Parser.preface.invalid=出现无效连接
http2Parser.processFrame.unexpectedType=需要帧类型[{0}]，但收到帧类型[{1}]
http2Parser.processFrameData.window=连接[{0}]，客户端发送的数据比流窗口允许的多
http2Parser.processFrameHeaders.decodingDataLeft=数据在HPACK解码后依然保留 - 它本应该被消费掉
http2Parser.processFrameHeaders.payload=连接：[{0}]，流：[{1}]，正在处理[{1}]大小的头文件负载
http2Parser.processFramePriority.invalidParent=连接[{0}]，流[{1}]，流可能不依赖于自身
http2Parser.processFramePushPromise=请求了新的远程流ID[{0}]，但所有远程流都必须使用奇数标识符\n\
\n
http2Parser.swallow.debug=连接：[{0}]，流：[{1}]，吞下[{2}]字节

stream.closed=连接[{0}]，流[{1}]，一旦关闭就无法写入流
stream.header.debug=连接[{0}]，流[{1}]，HTTP标头[{2}]，值[{3}]
stream.header.noPath=连接[{0}]，流[{1}]，[：path]伪标头为空
stream.header.required=连接 [{0}], 流 [{1}], 缺少一个或多个必要的头文件
stream.header.unknownPseudoHeader=收到连接[{0}]，流[{1}]，未知伪标头[{2}]
stream.inputBuffer.readTimeout=等待从客户端读取数据超时
stream.inputBuffer.reset=流.重置
stream.inputBuffer.signal=读线程在等待时，数据被添加到inBuffer中。 发信号通知该线程继续
stream.reprioritisation.debug=连接[{0}]，流[{1}]，独占[{2}]，父[{3}]，权重[{4}]
stream.reset.fail=连接[{0}]，流[{1}]，重置流失败
stream.writeTimeout=等待客户端增加流控制窗口以允许写入流数据的超时

streamProcessor.cancel=连接到[{0}]，Stream [{1}]，
streamProcessor.error.connection=连接[{0}]，Stream[{0}]，处理中发生错误，对连接来说是致命的。
streamProcessor.service.error=请求处理期间出错

streamStateMachine.debug.change=(:连接[{0}]，流[{1}]，状态从[{2}]更改为[{3}]

upgradeHandler.allocate.left=连接[{0}]，流[{1}]，[{2}]字节未分配 - 尝试分配给子项
upgradeHandler.allocate.recipient=(:连接[{0}]，流[{1}]，潜在接收者[{2}]，权重为[{3}]
upgradeHandler.goaway.debug=连接[{0}]，离开，最后的流[{1}]，错误码[{2}]，调试数据[{3}]
upgradeHandler.init=连接[{0}]，状态[{1}]
upgradeHandler.ioerror=连接[{0}]
upgradeHandler.pingFailed=对客户端发送ping 链接失败.
upgradeHandler.prefaceReceived=连接[{0}]，从客户端收到连接准备。
upgradeHandler.pruneIncomplete=连接[{0}]，流[{1}]，无法完全修剪连接，因为有[{2}]个活动流太多
upgradeHandler.prunedPriority=连接[{0}]已经成为了属于优先级树中未使用的流[{1}]
upgradeHandler.rst.debug=连接[{0}]，流[{1}]，错误[{2}]，消息[{3}]，RST（关闭流）
upgradeHandler.sendPrefaceFail=连接[{0}]，给客户端发送前言失败
upgradeHandler.socketCloseFailed=关闭 socket 错误
upgradeHandler.stream.closed=流[{0}]已经关闭了一段时间
upgradeHandler.stream.even=\ 请求了新的远程流ID[{0}]，但所有远程流都必须使用奇数标识符\n\
\n
upgradeHandler.tooMuchOverhead=连接[{0}]，开销过大，连接将关闭
upgradeHandler.upgrade=连接[{0}], HTTP/1.1 升级到流[1]
upgradeHandler.upgrade.fail=):连接[{0}]，http/1.1升级失败
upgradeHandler.upgradeDispatch.entry=条目，连接[{0}]，SocketStatus [{1}]
upgradeHandler.upgradeDispatch.exit=退出，连接[{0}]， SocketState[{1}]
upgradeHandler.windowSizeTooBig=连接[{0}]，流[{1}]，窗口太大
upgradeHandler.writeBody=连接 [{0}],数据流[{1}], 数据长度[{2}]
upgradeHandler.writeHeaders=连接 [{0}]，流 [{1}]

windowAllocationManager.notify=连接[{0}], 流[{1}], 等待类型[{2}], 通知类型[{3}]
windowAllocationManager.waitFor.ise=连接[{0}], 流[{1}], 已经准备好

writeStateMachine.ise=处于 [{1}] 状态时调用 [{0}()] 方法是非法的
